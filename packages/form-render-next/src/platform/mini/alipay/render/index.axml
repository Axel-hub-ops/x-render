<!--
  FormRender 动态渲染组件的小程序实现

  说明: TODO

  使用: TODO

  Demo: TODO
-->

<view 
  class="{{formContainer.getClassByTheme(props)}}" 
  style="{{props.theme === 'tiny' ? `background: ${props.background} no-repeat; padding: ${props.background ? '28rpx' : '0 28rpx'} `: ''}}"
>
  <view class="{{basic.title ? 'c-form-container-title': 'c-form-container-no-title'}}">
    {{basic.title}}
  </view>

  <view 
    class="c-form-container-tips"
    a:if="{{basic.tips}}"
  >
    <html content="{{basic.tips}}"/>
  </view>

  <view>
    {{initialValues.input1}}
    <form
      a:if="{{form && form !== ''}}"
      onValuesChange="onValuesChange"
      form="{{form}}"
      ref="getFormRef"
      onFinish="handleSubmit"
      initialValues="{{initialValues}}"
    >
      <form-item
        a:for="{{formFields}}"
        data="{{item}}"
        form="{{form}}"
      >
        <!-- 基础表单组件 -->
        <base-component
          componentName="{{item.schema.widget}}"
          form={{form}}
        />

        <!--
          下面表示第三方自定义组件, 表示渲染一个表单元素

          一个抽象的表单元素表单元素的 props 至少要有以下几个属性:
          1. "componentName": 需要渲染的表单项组件的名字
          2. "value": 表单项的值
          3. "onValueChange": 表单项组件的值变化的钩子函数

          渲染表单的过程中，FormRender 将会将表单项对应的 三个属性传入，
          这个组件需要实现：
          1. 根据 componentName , 显示对应类型的组件，
          2. 根据 value , 修改组件的值
          3. 在组件的数值改变的时候， 触发 onValueChange 钩子, 并把新的数值传入。
        -->
        <customize-form-render-component
          componentName="{{item.componentName}}"
          form={{form}}
        />
        
        <block slot="form-tip">
          <customize-form-render-tip-view value="[some value]" />
        </block>

      </form-item>
    </form>

  </view>
</view>

